
3. Database Structure
- Skills Database: Contains skill categories, subcategories, and individual skills with metadata.
- Languages Database: Supports multi-language features for skill names and descriptions.
- Cities, Countries, Occupations, Hobbies Databases: Provide reference data for user profiles and matching.
- Indexes: Used for performance optimization in search and matching operations.

SkillTalk Skill Database Implementation Guide

> **Note:** The SkillTalk skill database is already fully implemented and lives in the `/database` directory. No new implementation is required—this section documents the actual system for Task Master and all developers. All access to the skill database must use the service/provider pattern as described below.

### Database Structure Overview

The SkillTalk skill database is designed for optimal performance with multilingual support, lazy loading, and efficient querying.

#### Key Design Principles
1. **Separation of Core Data and Translations**
   - Core data (IDs, relationships, metadata) stored separately from language-specific content
   - Allows loading only the needed language, not all languages at once
2. **Hierarchical Lazy Loading**
   - Follows the Category → Subcategory → Skills pattern
   - Each level loaded independently when needed
3. **Language-Specific Organization**
   - Translations organized by language code in separate directories
   - Allows loading only the currently active language
4. **Performance Indexes**
   - Pre-built indexes for common query patterns
   - Supports faster lookups and filtering

#### File Structure

```
database/
├── core/
│   ├── categories.json       # Core category data (no translations)
│   ├── subcategories.json    # Core subcategory data 
│   ├── skills.json           # Core skill data
│
├── languages/
│   ├── en/                   # English translations
│   │   ├── categories.json   # Category translations
│   │   ├── subcategories.json # Subcategory translations
│   │   ├── skills.json       # Skill translations
│   │   ├── hierarchy/        # Hierarchical structure for lazy loading
│   │       ├── category_id.json  # Category with subcategories
│   │       ├── category_id/      # Subcategory folders
│   │           ├── subcategory_id.json # Subcategory with skills
│   ├── es/                   # Spanish translations
│   └── [other languages]
│
├── indexes/
│   ├── difficulty_index.json # Skills grouped by difficulty
│   ├── popularity_index.json # Skills grouped by popularity
│   ├── tag_index.json        # Skills grouped by tags
│   └── category_tree.json    # Hierarchical structure index
├── cache_config.json         # Caching settings
```

#### Core Models

(Include the full Dart class definitions for SkillModel, SkillCategoryModel, SkillSubcategoryModel, UserSkill, as in the guide)

#### Database Helper & Hierarchy Manager

(Include the DatabaseHelper and SkillHierarchyManager Dart classes as in the guide)

#### Skill Compatibility Matrix

(Include the SkillCompatibilityMatrix Dart class as in the guide)

#### Service Integration

- **ISkillDatabaseService Interface**
- **MultiSkillDatabaseService**

(Include the interface and multi-provider pattern code as in the guide)

#### Best Practices

- Always access the skill database through the ServiceProvider (never instantiate services directly)
- Use progressive disclosure for skill selection (Category → Subcategory → Skill)
- Implement proper error handling and loading states
- Use consistent terminology: `targetSkill`, `expertSkill`, `proficiencyLevel`

#### Terminology Consistency
- Always use `targetSkill` and `targetSkillId` (never `wishSkill` or `wishSkillId`)
- Use `expertSkill` and `expertSkillId` for skills to teach
- Use `proficiencyLevel` for skill level (not `level` or `skillLevel`)

#### Loading State Management
- Implement loading states for all skill data access

#### Reference
- The `/database` directory is the canonical source of truth for the skill database structure and content.

---

**Rules applied:**
- No information loss: All previous requirements and context are preserved.
- Naming consistency: `targetSkill`, `expertSkill`, etc.
- Multi-provider/service pattern: All access via service/provider.
- Explicit rules statement: This note.

## 3.3 Analytics & Metrics
- **SkillAnalyticsProvider**: Tracks key metrics:
  - Average skill selection time
  - Match success rate
  - User satisfaction rate
  - Skill coverage rate
  - Search abandonment count

```dart
// Example: Tracking skill selection time
await analyticsProvider.trackSkillSelectionTime(startTime, endTime);
```

### 3.4 UI Components
- **CategoryTile**: Displays skill categories with icons
- **SubcategoryTile**: Shows subcategories in list format
- **SkillTile**: Individual skill display with popularity and difficulty
- **SkillProficiencySelector**: Level selection UI
- **SkillSmartSuggestions**: Recommendations interface
- **SkillProgressiveDisclosure**: Hierarchical selection UI

### 3.5 Data Management
- **SkillHierarchyManager**: Manages the 3-level hierarchy structure
- **SkillDatabaseInitializer**: Seeds initial skill data
- **SkillRegionAnalyticsService**: Handles regional customization

## 3.6 Key Design Decisions

1. **Hierarchical Structure**: 3-level hierarchy prevents overwhelming users while providing comprehensive coverage
2. **Multi-Language First**: All components designed for internationalization from the start
3. **Progressive Disclosure**: Users see only relevant options at each step
4. **Smart Defaults**: Regional and algorithmic recommendations reduce friction
5. **Relationship-Based Matching**: Skills connect through multiple dimensions for better matches
6. **Continuous Optimization**: Analytics track success metrics for ongoing improvement

## 3.7 Integration Flow

1. **Onboarding**: Users select expert and target skills using progressive disclosure or smart suggestions
2. **Matching**: System uses compatibility matrix to find optimal skill exchange partners
3. **Analytics**: All interactions tracked for continuous improvement
4. **Regional Adaptation**: System adapts to local preferences and cultural nuances

This architecture ensures users can easily find and select skills while the system maintains rich data for successful matching globally.

