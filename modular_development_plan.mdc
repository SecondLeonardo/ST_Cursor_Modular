---
description: 
globs: 
alwaysApply: true
---
SkillTAlk comprehensive modular development plan based on the documents and MVVM architecture requirements.

here's the comprehensive **Modular Development Architecture** for the app:

## üìã **SkillTalk Modular Architecture Overview**

**Applied Rules**: R0.11 (Project Directory Structure), R0.9 (Multi-Provider Strategy), R0.0 (UIUX Reference), R0.6 (Dart to Swift Conversion)

### **Core Modules Identified:**

1. **üèóÔ∏è Core Infrastructure Module**
2. **üîê Authentication & Onboarding Module** 
3. **üß† Skills & Matching Engine Module**
4. **üí¨ Communication & Chat Module**
5. **üì± Social Feed & Posts Module**
6. **üéôÔ∏è Voice/Live Room Module**
7. **üí∞ Monetization & Economy Module**
8. **‚öôÔ∏è Settings & Configuration Module**
9. **üõ°Ô∏è Safety & Moderation Module**
10. **üìä Analytics & Gamification Module**
11. **üé® Theme & UI Module**
12. **üñºÔ∏è Media Optimization Module**

---

# üìñ **SkillTalk Development Implementation Guide**
*Complete Modular Development Plan with MVVM Architecture*

## **Development Phase Overview**

### **Phase 1: Foundation & Core Infrastructure** (2-3 weeks)
**Priority**: Critical - Must be completed first

### **Phase 2: Authentication & User Management** (2 weeks)  
**Priority**: Critical - Required for all user features

### **Phase 3: Skills & Matching Engine** (3 weeks)
**Priority**: Critical - Core business logic

### **Phase 4: Communication & Chat** (3-4 weeks)
**Priority**: High - Primary user interaction

### **Phase 5: Social Features & Posts** (2-3 weeks)
**Priority**: High - Community engagement

### **Phase 6: Real-time Audio/Video** (4 weeks)
**Priority**: High - Advanced communication

### **Phase 7: Monetization & Economy** (2 weeks)
**Priority**: Medium - Revenue features

### **Phase 8: Advanced Features** (2-3 weeks)
**Priority**: Low - Enhancement features

---

## **Phase 1: Foundation & Core Infrastructure**


### **Step 1.1: Project Setup & Core Architecture** 

```swift
// Create base project structure following R0.11
SkillTalk/
‚îú‚îÄ‚îÄ Core/
‚îÇ   ‚îú‚îÄ‚îÄ Base/
‚îÇ   ‚îú‚îÄ‚îÄ Extensions/
‚îÇ   ‚îú‚îÄ‚îÄ Utils/
‚îÇ   ‚îî‚îÄ‚îÄ Constants/
‚îú‚îÄ‚îÄ Data/
‚îÇ   ‚îú‚îÄ‚îÄ Models/
‚îÇ   ‚îú‚îÄ‚îÄ Services/
‚îÇ   ‚îî‚îÄ‚îÄ Repositories/
‚îú‚îÄ‚îÄ Features/
‚îî‚îÄ‚îÄ Shared/
```

**Tasks:**
- [ ] Initialize Xcode project with iOS 15.1 deployment target (R0.2)
- [ ] Setup CocoaPods with required dependencies
- [ ] Create base MVVM architecture classes
- [ ] Implement error handling framework
- [ ] Setup logging and debugging tools

**AI Prompt:**
```
Create the base iOS project structure for SkillTalk with MVVM architecture. Include BaseViewModel, BaseViewController, and core extension files. Follow the directory structure in R0.11 rule. Set iOS deployment target to 15.1.
```

### **Step 1.2: Multi-Provider Service Architecture** (4 days)

**Tasks:**
- [ ] Implement Multi-Provider Strategy (R0.9)
- [ ] Create service protocols for all external APIs
- [ ] Setup Firebase (primary) and Supabase (fallback) configurations
- [ ] Implement automatic failover system
- [ ] Create service health monitoring

**AI Prompt:**
```
Implement the multi-provider architecture for SkillTalk following R0.9 rule. Create protocols and implementations for Firebase (primary) and Supabase (fallback) for authentication, database, and storage services. Include automatic failover and health monitoring.
```

### **Step 1.3: Database Integration** (3 days)

**Tasks:**
- [ ] Integrate existing skill database from `/database` directory
- [ ] Setup reference data services from `/Sources/SkillTalk/Data/Services/ReferenceData/`
- [ ] Implement database caching and optimization
- [ ] Create data access layer with Repository pattern

**AI Prompt:**
```
Integrate the existing SkillTalk databases located at /Users/applemacmini/SkillTalk/database and /Users/applemacmini/SkillTalk/Sources/SkillTalk/Data/Services/ReferenceData/Implementation. Convert the database services to Swift with proper caching and Repository pattern following MVVM architecture.
```

### **Step 1.4: Theme System & UI Foundation** (2 days)

**Tasks:**
- [ ] Implement primary color system (#2fb0c7) (R0.10) ()
- [ ] Create dark mode support (R0.10)
- [ ] Setup shared UI components (@uiux0.md , ..., @uiux19.md)
- [ ] Implement responsive design system

**AI Prompt:**
```
Create the theme system for SkillTalk using primary color #2fb0c7 (R0.10). Implement dark mode support and create shared UI components including buttons, cards, and navigation elements following the UIUX design specifications.

Color Palette & Visual Identity
- Primary Color: #2fb0c7
- Mid Color 65%: #4dffea
- Light Color 95%: #e6fffc
- Semantic Colors:
  - Primary T: Color(0xFFFFFFFF)
  - Error: Color(0xFFE53935)
  - Warning: Color(0xFFFFA000)
  - Success: Color(0xFF43A047)
  - Information: Color(0xFF1E88E5)
- Dark Theme Colors:
  - Background: Color(0xFF121212)
  - Surface: Color(0xFF1E1E1E)
  - Text Primary: Color(0xFFFFFFFF)
  - Text Secondaryext: Color(0xFF000000)
  - Secondary Text: Color(0xFF757575)
  - Disabled Elements: Color(0xFFBDBDBD)
  - Background: Color(0xFFB3B3B3)

```

---

## **Phase 2: Authentication & User Management**
*Estimated Duration: 2 weeks*

### **Step 2.1: Onboarding Flow** (4 days) (@uiux1.md)
**Tasks:**
- [ ] Welcome screens with app introduction
- [ ] Social login integration (Apple, Google, Facebook)
- [ ] Country and language selection
- [ ] Skill selection (expert and target skills)
- [ ] Profile picture upload and basic info collection

**AI Prompt:**
```
Implement the complete onboarding flow for SkillTalk following the user flow in UIUX0.md. Include welcome screens, social login options, language selection, skill selection using the existing skill database, and profile setup. Use MVVM architecture with proper ViewModels and navigation coordination.
```

### **Step 2.2: Authentication Services** (3 days)

**Tasks:**
- [ ] Multi-provider authentication (Firebase + Supabase)
- [ ] Token management and refresh
- [ ] Biometric authentication support
- [ ] Session management

**AI Prompt:**
```
Create the authentication service implementation using the multi-provider strategy. Support Apple, Google, Facebook, and phone number authentication. Include biometric authentication, secure token storage, and session management. Follow the protocols defined in Phase 1.
```

### **Step 2.3: Profile Management** (3 days)

**Tasks:**
- [ ] User profile creation and editing
- [ ] Sub-profile features (MBTI, blood type, occupation)
- [ ] Profile privacy settings
- [ ] Profile validation and completion tracking

**AI Prompt:**
```
Implement the user profile management system based on the profile design in UIUX0.md and UIUX1.md and uiux15.md . Include main profile, sub-profile features, profile stats, and privacy controls. Use the reference databases for countries, cities, occupations, and hobbies (/Sources/SkillTalk/Data/Services/ReferenceData/).
```

---

## **Phase 3: Skills & Matching Engine**
*Estimated Duration: 3 weeks*

### **Step 3.1: Skills Database Integration** (3 days) (@prd_core_feature_part2.txt)

**Tasks:**
- [ ] Skills service with hierarchical loading
- [ ] Skill compatibility matrix
- [ ] Skill search and filtering
- [ ] User skill association

**AI Prompt:**
```
Create the skills management system using the existing skill database. Implement hierarchical skill loading (Category ‚Üí Subcategory ‚Üí Skills), skill compatibility calculation, and user skill association. Include search and filtering capabilities with performance optimization.
```

### **Step 3.2: Matching Algorithm** (5 days)

**Tasks:**
- [ ] Core matching logic based on complementary skills
- [ ] Language compatibility matching
- [ ] Geographic and preference filtering
- [ ] Match scoring and ranking system

**AI Prompt:**
```
Implement the core matching algorithm for SkillTalk. Match users with complementary skills (User A teaches what User B wants to learn, and vice versa). Include language compatibility, geographic filters, and comprehensive scoring system. Use the existing skill and reference databases.
```

### **Step 3.3: Match Interface & Filters** (4 days)

**Tasks:**
- [ ] Match feed with infinite scroll
- [ ] Advanced filtering system
- [ ] Boost center functionality
- [ ] Match profile preview and actions

**AI Prompt:**
```
Create the Match page interface following the design in UIUX0.md. Include match feed, filter system (skill, language, location, age), boost center, and match interactions. Implement infinite scroll and real-time updates using MVVM architecture.
```

### **Step 3.4: Search & Discovery** (3 days)

**Tasks:**
- [ ] Global search functionality
- [ ] Search suggestions and autocomplete
- [ ] Search history and bookmarks
- [ ] Advanced search filters

**AI Prompt:**
```
Implement the search and discovery system. Include global search across users, skills, and content. Add search suggestions, history, and advanced filtering options. Use efficient search algorithms and caching for performance.
```

---

## **Phase 4: Communication & Chat**
*Estimated Duration: 3-4 weeks*

### **Step 4.1: Core Chat System** (5 days) (@uiux2.md)

**Tasks:**
- [ ] Real-time messaging with multi-provider support
- [ ] Message types (text, voice, image, file)
- [ ] Message status tracking (sent, delivered, read)
- [ ] Offline message queuing

**AI Prompt:**
```
Create the core chat system for SkillTalk following WhatsApp-like functionality. Implement real-time messaging using the multi-provider strategy (Realtime DB + Pusher/Ably). Support text, voice, image, and file messages with proper status tracking and offline handling.
```

### **Step 4.2: Group Chat Management** (4 days)

**Tasks:**
- [ ] Group creation and management
- [ ] Member roles and permissions
- [ ] Group settings and customization
- [ ] Group QR codes and invitations

**AI Prompt:**
```
Implement group chat functionality including group creation, member management, roles and permissions, group settings, and QR code sharing. Follow the group chat design specifications in the UIUX documents.
```

### **Step 4.3: Chat Features & Tools** (4 days)

**Tasks:**
- [ ] Translation integration
- [ ] Sticker and emoji support
- [ ] Voice message recording and playback
- [ ] Chat backgrounds and customization

**AI Prompt:**
```
Add advanced chat features including real-time translation (LibreTranslate + DeepL), sticker gallery, voice message recording/playback, and chat customization options. Implement the features shown in the chat interface designs.
```

### **Step 4.4: Voice & Video Calls** (4 days)

**Tasks:**
- [ ] One-on-one voice/video calls
- [ ] Call management (mute, speaker, camera toggle)
- [ ] Call history and favorites
- [ ] Multi-provider call services (Daily.co + 100ms.live)

**AI Prompt:**
```
Implement voice and video calling functionality using the multi-provider strategy (Daily.co primary, 100ms.live fallback). Include call controls, call history, and favorites management. Follow the call interface designs in the UIUX documents.
```

---

## **Phase 5: Social Features & Posts**
*Estimated Duration: 2-3 weeks*

### **Step 5.1: Posts Feed System** (4 days) (@uiux9.md)

**Tasks:**
- [ ] Instagram-like posts feed
- [ ] Post creation (text, image, audio)
- [ ] Post interactions (like, comment, share)
- [ ] Feed algorithm and content discovery

**AI Prompt:**
```
Create the posts system following Instagram-like functionality. Implement post creation, feed display, interactions (like, comment, share), and content discovery. Use the posts design specifications from UIUX0.md and UIUX1.md.
```

### **Step 5.2: Content Creation & Management** (3 days)

**Tasks:**
- [ ] Rich text post creation
- [ ] Image and audio post support
- [ ] Post editing and deletion
- [ ] Content moderation integration

**AI Prompt:**
```
Implement content creation tools for posts including rich text editing, image/audio attachments, post management, and basic content moderation. Include the posting interface and content management features.
```

### **Step 5.3: Social Interactions** (3 days)

**Tasks:**
- [ ] Follow/unfollow system
- [ ] Post engagement tracking
- [ ] User activity feeds
- [ ] Social notifications

**AI Prompt:**
```
Create the social interaction system including follow/unfollow, engagement tracking, activity feeds, and social notifications. Implement user stats tracking (followers, following, visitors) as shown in the profile designs.
```

### **Step 5.4: Gamification Features** (3 days)

**Tasks:**
- [ ] Streak tracking system
- [ ] Activity rankings
- [ ] Badges and achievements
- [ ] Leaderboards

**AI Prompt:**
```
Implement gamification features including daily streaks, activity rankings, badges, and leaderboards. Create the streak page and lottery rewards system as designed in the UIUX documents.
```

---

## **Phase 6: Real-time Audio/Video**
*Estimated Duration: 4 weeks*

### **Step 6.1: Voice Room Infrastructure** (5 days) (@uiux4.md, @uiux5.md)

**Tasks:**
- [ ] Voice room creation and management
- [ ] Real-time audio streaming
- [ ] Room permissions and moderation
- [ ] Multi-provider audio services

**AI Prompt:**
```
Create the voice room infrastructure using the multi-provider strategy (Agora RTM & RTC + 100ms.live). Implement room creation, real-time audio streaming, participant management, and moderation tools following the voice room designs.
```

### **Step 6.2: Live Room Features** (5 days)

**Tasks:**
- [ ] Live streaming functionality
- [ ] Host and participant controls
- [ ] Live chat integration
- [ ] Audience interaction tools

**AI Prompt:**
```
Implement live streaming rooms with host controls, participant management, live chat, and audience interaction features. Include the live room creation and management interfaces as specified in the UIUX documents.
```

### **Step 6.3: Room Management & Controls** (4 days)

**Tasks:**
- [ ] Host center dashboard
- [ ] Room settings and privacy
- [ ] Participant controls (mute, kick, promote)
- [ ] Room analytics and insights

**AI Prompt:**
```
Create room management tools including host center, room settings, participant controls, and analytics. Implement the host interface and moderation tools as designed in the voice room specifications.
```

### **Step 6.4: Gift & Interaction System** (4 days)

**Tasks:**
- [ ] Virtual gift sending in rooms
- [ ] Gift animations and effects
- [ ] Gift leaderboards
- [ ] Room interaction tools

**AI Prompt:**
```
Implement the virtual gift system for voice and live rooms including gift sending, animations, leaderboards, and interaction tools. Create the gift shopping center and reward systems as shown in the designs.
```

---

## **Phase 7: Monetization & Economy**
*Estimated Duration: 2 weeks*

### **Step 7.1: ST Coins System** (4 days)

**Tasks:**
- [ ] Virtual currency management
- [ ] Coin purchasing with real money
- [ ] Transaction history and tracking
- [ ] Coin spending mechanisms

**AI Prompt:**
```
Create the ST Coins virtual currency system including coin purchasing (RevenueCat + StoreKit), transaction management, spending mechanisms for gifts and boosts, and the ST Coins shop interface from the UIUX designs.
```

### **Step 7.2: VIP Subscription System** (3 days)

**Tasks:**
- [ ] VIP membership tiers
- [ ] Subscription management
- [ ] VIP feature access control
- [ ] Subscription interface

**AI Prompt:**
```
Implement the VIP subscription system with membership tiers, subscription management, and feature access control. Create the VIP comparison page and subscription interface as designed in the UIUX documents.
```

### **Step 7.3: Boost & Premium Features** (3 days)

**Tasks:**
- [ ] Profile and post boost system
- [ ] Premium search filters
- [ ] VIP-only features
- [ ] Monetization analytics

**AI Prompt:**
```
Create boost and premium features including profile boost, post boost, premium filters, and VIP-only functionalities. Implement the boost center and custom settings as shown in the match and posts designs.
```

---

## **Phase 8: Advanced Features**
*Estimated Duration: 2-3 weeks*

### **Step 8.1: Settings & Configuration** (4 days) (@uiux16.md)

**Tasks:**
- [ ] Comprehensive settings system
- [ ] Privacy and security controls
- [ ] Account management
- [ ] Data export and deletion

**AI Prompt:**
```
Implement the complete settings system including privacy controls, security settings, account management, and data controls. Create all the settings pages and interfaces as detailed in the UIUX documents.
```

### **Step 8.2: Safety & Moderation** (3 days)

**Tasks:**
- [ ] User reporting system
- [ ] Content moderation tools
- [ ] Block and restrict features
- [ ] Safety guidelines enforcement

**AI Prompt:**
```
Create safety and moderation features including user reporting, content moderation, blocking/restricting users, and safety guideline enforcement. Implement the report pages and moderation interfaces.
```

### **Step 8.3: Analytics & Insights** (3 days)

**Tasks:**
- [ ] User analytics dashboard
- [ ] App performance tracking
- [ ] Feature usage analytics
- [ ] Business intelligence reporting

**AI Prompt:**
```
Implement analytics and insights including user dashboards, performance tracking, usage analytics, and reporting systems. Create analytics interfaces for users and administrative insights.
```

### **Step 8.4: Optimization & Performance** (4 days)

**Tasks:**
- [ ] Image and media optimization
- [ ] App performance optimization
- [ ] Caching improvements
- [ ] Load time optimization

**AI Prompt:**
```
Implement optimization features including image compression, media optimization, performance improvements, advanced caching, and load time optimization. Focus on the media optimization module requirements.
```

---

## **Development Order Priority Matrix**

### **Critical Path (Must Complete First):**
1. Core Infrastructure ‚Üí Authentication ‚Üí Skills & Matching ‚Üí Communication

### **Parallel Development Possible:**
- Social Features can develop alongside Communication
- Monetization can develop alongside Advanced Features
- Theme System runs parallel to all UI development

### **Dependencies:**
- All modules depend on Core Infrastructure
- Communication features require Authentication
- Monetization requires established user base features
- Advanced features require core functionality

---

## **Implementation Guidelines**

### **MVVM Architecture Standards:**
- **Views**: SwiftUI views with minimal logic
- **ViewModels**: ObservableObject classes managing state
- **Models**: Codable structs for data representation  
- **Services**: Protocol-based with dependency injection

### **Code Quality Standards:**
- Follow R0.3 (Error Resolution) - fix all errors before next phase
- Use R0.4 (Minimal Change Debugging) for issue resolution
- Apply R0.1 (File Creation Protocol) for organized development
- Implement comprehensive testing for each module

### **Testing Strategy:**
- Unit tests for all ViewModels and Services
- Integration tests for multi-provider systems
- UI tests for critical user flows
- Performance tests for real-time features

This comprehensive development plan provides a structured approach to building SkillTalk with proper modular architecture, ensuring each module can be developed, tested, and maintained independently while following MVVM best practices and iOS development standards.
