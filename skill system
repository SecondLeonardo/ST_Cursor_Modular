# SkillTalk Skill System: Project Knowledge Reference

This document provides a comprehensive reference for the skill database system in the SkillTalk app, ensuring consistency across all development sessions.

## Core Architecture

### Skill Database Structure
- **3-Level Hierarchy**:
  - **Categories**: 14 main skill categories
  - **Subcategories**: 8-12 subcategories per category (~140 total)
  - **Skills**: 10-15 skills per subcategory (2000+ total)

- **Multi-Language Support**:
  - 30 languages including: English, Spanish, French, German, Italian, Portuguese, Russian, Chinese, Japanese, Korean, Arabic, Hindi, Bengali, Turkish, Dutch, Polish, Swedish, Vietnamese, Thai, Indonesian, Persian, Punjabi, Swahili, Hausa, Amharic, Yoruba. gujarati, tamil, 

### Core Models
```dart
SkillCategoryModel
SkillSubcategoryModel
SkillModel
SkillRelationship
```

### Key Interfaces
```dart
ISkillDatabaseService
  - getAllCategories()
  - getSubcategoriesByCategory(String categoryId)
  - getSkillsBySubcategory(String subcategoryId)
  - searchSkills(SkillSearchParams params)
  - getPopularSkillsByRegion(String countryCode)
  - getRecommendedPairings(String expertSkillId)
  - calculateCompatibilityScore(String expertSkillId, String targetSkillId)
```

### Service Implementations
```dart
FirebaseSkillDatabaseService
MultiSkillDatabaseService
SkillDatabaseInitializer
SkillHierarchyManager
SkillCompatibilityMatrix
SkillRegionAnalyticsService
```

### Key UI Components
```dart
SkillProgressiveDisclosure
SkillSmartSuggestions 
SkillProficiencySelector
```

## Database Configuration

### Categories (example data)
```dart
'tech_digital': {
  'name': 'Technology & Digital',
  'translations': { 
    'en': 'Technology & Digital',
    'es': 'Tecnología y Digital',
    // More translations...
  }
}
```

### Subcategories (example data)
```dart
'programming': {
  'category_id': 'tech_digital',
  'name': 'Programming',
  'translations': {
    'en': 'Programming',
    'es': 'Programación',
    // More translations...
  }
}
```

### Skills (example data)
```dart
'javascript': {
  'subcategory_id': 'programming',
  'name': 'JavaScript',
  'difficulty_level': 3,
  'popularity_score': 85,
  'tags': ['web', 'frontend', 'backend'],
  'translations': {
    'en': 'JavaScript',
    'es': 'JavaScript',
    // More translations...
  }
}
```

## Key Concepts & Terminology

### Important Note on Terminology
- **Expertise/Expert Skill**: The skill the user can teach others
- **Target Skill**: The skill the user wants to learn (previously called "Wish Skill")

### Technical Terms
- **Skill Compatibility**: Algorithm for matching complementary skills
- **Progressive Disclosure**: UI pattern for step-by-step skill selection
- **Regional Relevance**: Adapting skill recommendations by location
- **Multi-Provider Strategy**: Using multiple backend services with fallback

## Implementation Notes

### Skill Database Initialization
- The system automatically seeds the database with categories, subcategories, and skills
- Uses batch operations for efficient initialization of 2000+ skills
- Includes translations for all 26 languages

### Skill Selection Flow
1. User selects a main category
2. User selects a subcategory
3. User selects a specific skill
4. (For expert skills) User indicates proficiency level

### Search & Recommendations
- Fuzzy search with tag matching
- Regional popularity weighting
- Skill compatibility matrix for recommendations

## Screen & Component Names

- **ExpertiseScreen**: For selecting skills you can teach
- **TargetSkillScreen**: For selecting skills you want to learn
- **SkillSearchScreen**: For searching across all skills
- **SkillDetailScreen**: For viewing details about a skill
- **SkillCompatibilityScreen**: For viewing match potential between skills

## Route Names

```dart
static const String expertise = '/expertise';
static const String targetSkill = '/targetskill';
static const String skillSearch = '/skill-search';
static const String skillDetail = '/skill-detail';
static const String skillCompatibility = '/skill-compatibility';
```

## File Locations

```
lib/
├── core/
│   ├── models/
│   │   ├── skill_category_model.dart
│   │   ├── skill_subcategory_model.dart
│   │   └── skill_model.dart
│   ├── services/
│   │   ├── interfaces/
│   │   │   └── skill_database_service_interface.dart
│   │   ├── firebase/
│   │   │   └── firebase_skill_database_service.dart
│   │   ├── multi/
│   │   │   └── multi_skill_database_service.dart
│   │   ├── skill_database_initializer.dart
│   │   ├── skill_hierarchy_manager.dart
│   │   ├── skill_compatibility_matrix.dart
│   │   └── skill_region_analytics_service.dart
├── features/
│   ├── onboarding/
│   │   ├── screens/
│   │   │   ├── expertise_screen.dart
│   │   │   └── target_skill_screen.dart
│   │   └── widgets/
│   │       ├── skill_progressive_disclosure.dart
│   │       ├── skill_smart_suggestions.dart
│   │       └── skill_proficiency_selector.dart
│   └── skills/
│       └── screens/
│           ├── skill_search_screen.dart
│           ├── skill_detail_screen.dart
│           └── skill_compatibility_screen.dart
```

## Integration with Other App Features

- **Auth Flow**: Stores user skill preferences with AuthProvider
- **Match System**: Uses skill compatibility for matchmaking
- **Profile Pages**: Displays user skills and proficiency
- **Search Filters**: Allows filtering by skill category, difficulty, etc.

## Performance Considerations

- **Batched Firebase Operations**: For efficient database operations
- **Caching Popular Skills**: To reduce database reads
- **Lazy Loading Subcategories**: Only loaded when category is selected
- **Image Optimization**: For skill icons and category visuals



# SkillTalk Skill System Architecture Overview

## System Components

### 1. Core Models
- **SkillCategoryModel**: Main categories (12-15 total)
- **SkillSubcategoryModel**: Subcategories (8-12 per main category)
- **SkillModel**: Individual skills (10-15 per subcategory)
- **SkillRelationship**: Defines relationships between skills
- **SkillMatchResult**: Results of skill matching operations

### 2. Database Services
- **ISkillDatabaseService**: Interface for all skill database operations
- **FirebaseSkillDatabaseService**: Firebase implementation of the interface
- **MultiSkillDatabaseService**: Multi-provider wrapper with usage tracking

### 3. Key Features Implementation

#### Multi-Language Support
- Skills stored with translations in multiple languages
- User's native language setting determines the display language
- Fallback to English if translation not available

```dart
// Example: Getting localized skill name
String localizedName = skill.getLocalizedName(userLanguageCode);
```

#### Search Optimization
- Fuzzy search support
- Tag-based search
- Phonetic search
- Regional popularity weighting

```dart
// Example: Skill search with parameters
final searchParams = SkillSearchParams(
  query: "guitar",
  languageCode: "en",
  countryCode: "US",
  minPopularity: 50,
);
final results = await skillDbService.searchSkills(searchParams);
```

#### Skill Relationships
- Three types: Similar, Prerequisite, Complementary
- Bidirectional relationships for better matching
- Strength rating from 0.0 to 1.0

```dart
// Example: Adding skill relationship
await skillDbService.addSkillRelationship(
  "python",
  "data_science",
  SkillRelationType.complementary,
  0.9
);
```

#### Progressive Disclosure UI
- Three-step selection process: Category → Subcategory → Skill
- Breadcrumb navigation
- Visual hierarchy with icons and colors

```dart
// Example: Using progressive disclosure widget
SkillProgressiveDisclosure(
  isExpertSkill: true,
  onSkillSelected: (skillId) {
    // Handle skill selection
  },
)
```

#### Smart Suggestions
- Popular skills in user's region
- Trending skills
- Recommended skill pairings based on expert skills
- Cultural-specific skills for regions

```dart
// Example: Getting smart suggestions
final popularSkills = await skillDbService.getPopularSkillsByRegion(userCountry);
final trendingSkills = await skillDbService.getTrendingSkills();
final recommendedPairings = await skillDbService.getRecommendedPairings(expertSkillId);
```

#### Skill Compatibility Matrix
- Calculates compatibility scores between skills
- Considers category alignment, relationships, tags, and difficulty
- Used for better matching between users

```dart
// Example: Finding compatible skills
final matches = await skillCompatibilityMatrix.findBestMatches(userSkillId);
```

#### Regional Relevance
- Tracks skill popularity by region
- Adjusts search results based on local demand
- Provides culturally relevant recommendations

```dart
// Example: Getting regional analytics
final heatmap = await regionAnalyticsService.getSkillPopularityHeatmap(skillId);
```

### 4. Analytics & Metrics
- **SkillAnalyticsProvider**: Tracks key metrics:
  - Average skill selection time
  - Match success rate
  - User satisfaction rate
  - Skill coverage rate
  - Search abandonment count

```dart
// Example: Tracking skill selection time
await analyticsProvider.trackSkillSelectionTime(startTime, endTime);
```

### 5. UI Components
- **CategoryTile**: Displays skill categories with icons
- **SubcategoryTile**: Shows subcategories in list format
- **SkillTile**: Individual skill display with popularity and difficulty
- **SkillProficiencySelector**: Level selection UI
- **SkillSmartSuggestions**: Recommendations interface
- **SkillProgressiveDisclosure**: Hierarchical selection UI

### 6. Data Management
- **SkillHierarchyManager**: Manages the 3-level hierarchy structure
- **SkillDatabaseInitializer**: Seeds initial skill data
- **SkillRegionAnalyticsService**: Handles regional customization

## Key Design Decisions

1. **Hierarchical Structure**: 3-level hierarchy prevents overwhelming users while providing comprehensive coverage
2. **Multi-Language First**: All components designed for internationalization from the start
3. **Progressive Disclosure**: Users see only relevant options at each step
4. **Smart Defaults**: Regional and algorithmic recommendations reduce friction
5. **Relationship-Based Matching**: Skills connect through multiple dimensions for better matches
6. **Continuous Optimization**: Analytics track success metrics for ongoing improvement

## Integration Flow

1. **Onboarding**: Users select expert and target skills using progressive disclosure or smart suggestions
2. **Matching**: System uses compatibility matrix to find optimal skill exchange partners
3. **Analytics**: All interactions tracked for continuous improvement
4. **Regional Adaptation**: System adapts to local preferences and cultural nuances

This architecture ensures users can easily find and select skills while the system maintains rich data for successful matching globally.




